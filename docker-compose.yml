version: '3.7'
services:

# service -> image -> container_name -> environment -> env_file -> port -> volumes -> restart

  ################## HADOOP ##################
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    hostname: namenode
    environment:
      - CLUSTER_NAME=data_lake
    env_file:
      - ./hadoop_hive.env
    ports:
      - "9870:9870"
      - "9000:9000"
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
    restart: unless-stopped

  datanode0:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode0
    hostname: datanode0
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hadoop_hive.env
    volumes:
      - hadoop_datanode0:/hadoop/dfs/data
    restart: unless-stopped

  datanode1:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode1
    hostname: datanode1
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hadoop_hive.env
    volumes:
      - hadoop_datanode1:/hadoop/dfs/data
    restart: unless-stopped

  datanode2:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode2
    hostname: datanode2
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hadoop_hive.env
    volumes:
      - hadoop_datanode2:/hadoop/dfs/data
    restart: unless-stopped

  resourcemanager:
    image: bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8
    container_name: resourcemanager
    hostname: resourcemanager
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode0:9864 datanode1:9864 datanode2:9864"
    env_file:
      - ./hadoop_hive.env
    ports:
      - "8089:8088"
    restart: unless-stopped

  nodemanager:
    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
    container_name: nodemanager
    hostname: nodemanager
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode0:9864 datanode1:9864 datanode2:9864 resourcemanager:8088"
    env_file:
      - ./hadoop_hive.env
    restart: unless-stopped
  
  historyserver:
    image: bde2020/hadoop-historyserver:2.0.0-hadoop3.2.1-java8
    container_name: historyserver
    hostname: historyserver
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode0:9864 datanode1:9864 datanode2:9864 resourcemanager:8088"
    env_file:
      - ./hadoop_hive.env
    ports:
      - "8188:8188"
    volumes:
      - hadoop_historyserver:/hadoop/yarn/timeline
    restart: unless-stopped

  
  ################# HIVE ##################
  hive-server:
    image: bde2020/hive:2.3.2-postgresql-metastore
    container_name: hive-server
    hostname: hive-server
    environment:
      HIVE_CORE_CONF_javax_jdo_option_ConnectionURL: "jdbc:postgresql://hive-metastore/metastore"
      SERVICE_PRECONDITION: "hive-metastore:9083"
    env_file:
      - ./hadoop_hive.env
    ports:
      - "10000:10000"
    volumes:
      - hive_data:/opt/hive
    restart: unless-stopped
    depends_on:
      - hive-metastore

  hive-metastore:
    image: bde2020/hive:2.3.2-postgresql-metastore
    container_name: hive-metastore
    hostname: hive-metastore
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode0:9864 datanode1:9864 datanode2:9864 hive-metastore-postgresql:5432"
    env_file:
      - ./hadoop_hive.env
    command: /opt/hive/bin/hive --service metastore
    ports:
      - "9083:9083"
    volumes:
      - hive_metastore_data:/opt/hive
    restart: unless-stopped
    depends_on:
      - hive-metastore-postgresql

  hive-metastore-postgresql:
    image: bde2020/hive-metastore-postgresql:2.3.0
    container_name: hive-metastore-postgresql
    hostname: hive-metastore-postgresql
    volumes:
      - hive_metastore_postgresql_data:/var/lib/postgresql/data
    restart: unless-stopped
    depends_on:
      - namenode
      - datanode0
      - datanode1
      - datanode2

  ################## TRINO ##################
  trino:
    image: trinodb/trino:latest
    container_name: trino
    hostname: trino
    ports:
      - "28080:8080"
    environment:
      - DISCOVERY_SERVER_ENABLED=true
      - HTTP_SERVER_HTTP_PORT=8080
      - JVM_HEAP_SIZE=1G
    volumes:
      - trino_data:/etc/trino
      - ./conf/trino/hive.properties:/etc/trino/catalog/hive.properties
      # - ./conf/trino/config.properties:/etc/trino/config.properties
      - ./conf/trino/jvm.config:/etc/trino/jvm.config
      - ./conf/hadoop-3.2.1/core-site.xml:/etc/hadoop/core-site.xml
      - ./conf/hadoop-3.2.1/hdfs-site.xml:/etc/hadoop/hdfs-site.xml
    restart: unless-stopped
    depends_on:
      - namenode
      - hive-server


  ################## ZOOKEEPER ##################
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    container_name: zookeeper    
    hostname: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    restart: unless-stopped
    volumes:
      - zk_data:/var/lib/zookeeper/data
      - zk_txn_logs:/var/lib/zookeeper/log


  ################## NIFI ##################
  nifi0:
    image: apache/nifi:1.28.1
    container_name: nifi0
    hostname: nifi0
    environment:
      - NIFI_WEB_HTTP_PORT=8080
      - NIFI_CLUSTER_IS_NODE=true
      - NIFI_CLUSTER_NODE_PROTOCOL_PORT=8082
      - NIFI_ZK_CONNECT_STRING=zookeeper:2181
      - NIFI_ELECTION_MAX_WAIT=1 min
      - NIFI_SENSITIVE_PROPS_KEY=MySuperSecretKey
    ports:
      - "6980:8080"
    volumes:
      - nifi0_data:/opt/nifi/nifi-current/flowfile_repository
      - nifi0_data:/opt/nifi/nifi-current/content_repository
      - nifi0_data:/opt/nifi/nifi-current/database_repository
      - nifi0_data:/opt/nifi/nifi-current/provenance_repository
      - ./conf/hadoop-3.2.1/core-site.xml:/opt/nifi/nifi-current/hadoop-3.2.1/core-site.xml
      - ./conf/hadoop-3.2.1/hdfs-site.xml:/opt/nifi/nifi-current/hadoop-3.2.1/hdfs-site.xml
      # - ./nifi/conf/nifi.properties:/opt/nifi/nifi-current/conf/nifi.properties
    restart: unless-stopped
    depends_on:
      - zookeeper

  nifi1:
    image: apache/nifi:1.28.1
    container_name: nifi1
    hostname: nifi1
    environment:
      - NIFI_WEB_HTTP_PORT=8080
      - NIFI_CLUSTER_IS_NODE=true
      - NIFI_CLUSTER_NODE_PROTOCOL_PORT=8082
      - NIFI_ZK_CONNECT_STRING=zookeeper:2181
      - NIFI_ELECTION_MAX_WAIT=1 min
      - NIFI_SENSITIVE_PROPS_KEY=MySuperSecretKey
    ports:
      - "6979:8080"
    volumes:
      - nifi1_data:/opt/nifi/nifi-current/flowfile_repository
      - nifi1_data:/opt/nifi/nifi-current/content_repository
      - nifi1_data:/opt/nifi/nifi-current/database_repository
      - nifi1_data:/opt/nifi/nifi-current/provenance_repository
      - ./conf/hadoop-3.2.1/core-site.xml:/opt/nifi/nifi-current/hadoop-3.2.1/core-site.xml
      - ./conf/hadoop-3.2.1/hdfs-site.xml:/opt/nifi/nifi-current/hadoop-3.2.1/hdfs-site.xml
      # - ./nifi/conf/nifi.properties:/opt/nifi/nifi-current/conf/nifi.properties
    restart: unless-stopped
    depends_on:
      - zookeeper

  nifi2:
    image: apache/nifi:1.28.1
    container_name: nifi2
    hostname: nifi2
    environment:
      - NIFI_WEB_HTTP_PORT=8080
      - NIFI_CLUSTER_IS_NODE=true
      - NIFI_CLUSTER_NODE_PROTOCOL_PORT=8082
      - NIFI_ZK_CONNECT_STRING=zookeeper:2181
      - NIFI_ELECTION_MAX_WAIT=1 min
      - NIFI_SENSITIVE_PROPS_KEY=MySuperSecretKey
    ports:
      - "6978:8080"
    volumes:
      - nifi2_data:/opt/nifi/nifi-current/flowfile_repository
      - nifi2_data:/opt/nifi/nifi-current/content_repository
      - nifi2_data:/opt/nifi/nifi-current/database_repository
      - nifi2_data:/opt/nifi/nifi-current/provenance_repository
      - ./conf/hadoop-3.2.1/core-site.xml:/opt/nifi/nifi-current/hadoop-3.2.1/core-site.xml
      - ./conf/hadoop-3.2.1/hdfs-site.xml:/opt/nifi/nifi-current/hadoop-3.2.1/hdfs-site.xml
      # - ./nifi/conf/nifi.properties:/opt/nifi/nifi-current/conf/nifi.properties
    restart: unless-stopped
    depends_on:
      - zookeeper


  ################## SPARK ##################
  spark-master:
    image: bde2020/spark-master:3.2.1-hadoop3.2
    container_name: spark-master
    hostname: spark-master
    environment:
      - INIT_DAEMON_STEP=setup_spark
    ports:
      - "8090:8080"
      - "7077:7077"
      - "4040:4040"
    volumes:
      - ./job_spark:/job_spark
    restart: unless-stopped

  spark-worker-0:
    image: bde2020/spark-worker:3.2.1-hadoop3.2
    container_name: spark-worker-0
    hostname: spark-worker-0
    environment:
      - "SPARK_MASTER=spark://spark-master:7077"
    ports:
      - "3081:8081"
    restart: unless-stopped
    depends_on:
      - spark-master

  spark-worker-1:
    image: bde2020/spark-worker:3.2.1-hadoop3.2
    container_name: spark-worker-1
    hostname: spark-worker-1
    environment:
      - "SPARK_MASTER=spark://spark-master:7077"
    ports:
      - "3082:8081"
    restart: unless-stopped
    depends_on:
      - spark-master

  spark-worker-2:
    image: bde2020/spark-worker:3.2.1-hadoop3.2
    container_name: spark-worker-2
    hostname: spark-worker-2
    environment:
      - "SPARK_MASTER=spark://spark-master:7077"
    ports:
      - "3083:8081"
    restart: unless-stopped
    depends_on:
      - spark-master

  spark-history-server:
    image: bde2020/spark-history-server:3.2.1-hadoop3.2
    container_name: spark-history-server
    hostname: spark-history-server
    ports:
      - "18081:18081"
    volumes:
      - /tmp/spark-events-local:/tmp/spark-events
    restart: unless-stopped
    depends_on:
      - spark-master


  ################## SUPERSET ##################
  superset:
    image: apache/superset:latest
    container_name: superset
    hostname: superset
    environment:
      SUPERSET_SECRET_KEY: datalake#bi
    ports:
      - "9038:8088"
    volumes:
      - superset_data:/app/superset_home
      - ./superset/config.py:/app/superset/config.py
    restart: unless-stopped

  ################## KAFKA ##################
  kafka0:
    image: confluentinc/cp-kafka:7.6.1
    container_name: kafka0
    hostname: kafka0
    ports:
      - "29090:29090"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka0:9092,LISTENER_DOCKER_EXTERNAL://localhost:29090
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: 'LISTENER_DOCKER_INTERNAL'
      KAFKA_JMX_PORT: 9090
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 1
      KAFKA_NUM_PARTITIONS: 3
      # KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
      CONFLUENT_METRICS_ENABLE: 'false'
    restart: unless-stopped
    volumes:
      - kafka0_data:/var/lib/kafka/data
    depends_on:
      - zookeeper

  kafka1:
    image: confluentinc/cp-kafka:7.6.1
    container_name: kafka1
    hostname: kafka1
    ports:
      - "29091:29091"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:9092,LISTENER_DOCKER_EXTERNAL://localhost:29091
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: 'LISTENER_DOCKER_INTERNAL'
      KAFKA_JMX_PORT: 9090
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 2
      KAFKA_NUM_PARTITIONS: 3
      # KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
      CONFLUENT_METRICS_ENABLE: 'false'
    restart: unless-stopped
    volumes:
      - kafka1_data:/var/lib/kafka/data
    depends_on:
      - zookeeper

  kafka2:
    image: confluentinc/cp-kafka:7.6.1
    container_name: kafka2
    hostname: kafka2
    ports:
      - "29092:29092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka2:9092,LISTENER_DOCKER_EXTERNAL://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: 'LISTENER_DOCKER_INTERNAL'
      KAFKA_JMX_PORT: 9090
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 3
      KAFKA_NUM_PARTITIONS: 3
      # KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
      CONFLUENT_METRICS_ENABLE: 'false'
    restart: unless-stopped
    volumes:
      - kafka2_data:/var/lib/kafka/data
    depends_on:
      - zookeeper

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "18080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: data_lake
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka0:9092,kafka1:9092,kafka2:9092
      KAFKA_CLUSTERS_0_METRICS_PORT: 9090
      DYNAMIC_CONFIG_ENABLED: 'true'
    restart: unless-stopped
    depends_on:
      - kafka0
      - kafka1
      - kafka2


  ################## GRAFANA ##################
  grafana:
    image: grafana/grafana-oss:9.5.3
    container_name: grafana
    hostname: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped

  ################## MARIADB ##################
  mariadb:
    image: mariadb:10.5
    container_name: mariadb
    hostname: mariadb
    environment:
      MYSQL_ROOT_PASSWORD: 123456
      MYSQL_DATABASE: datalake
      MYSQL_USER: datalake
      MYSQL_PASSWORD: 123456
    ports:
      - "3306:3306"
    volumes:
      - mariadb_data:/var/lib/mysql
    restart: unless-stopped


volumes:
  hadoop_namenode:
  hadoop_datanode0:
  hadoop_datanode1:
  hadoop_datanode2:
  hadoop_historyserver:
  hive_data:
  hive_metastore_data:
  hive_metastore_postgresql_data:
  zk_data:
  zk_txn_logs:
  nifi0_data:
  nifi1_data:
  nifi2_data:
  superset_data:
  kafka0_data:
  kafka1_data:
  kafka2_data:
  grafana_data:
  mariadb_data:
  trino_data: